name: Build and Push Docker Image to ECR


on:
  push:
    branches:
      - feature/3.0.1  
env:
  gha-role-name: "GitHubAction-AssumeRoleWithAction"
  dockerfile-path: "./Dockerfile"
  composefile-path: "./docker-compose.yaml"
  ecr-repo-aws-region: "us-west-1"
  NETWORK: "tn-testnet"
  VALIDATOR_ROLE: "validator"
  EXPLORER_ROLE: "explorer"

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write

jobs:
  print_timestamp:
    uses: treasurenetprotocol/reusable-workflows/.github/workflows/reusable-timestamp.yml@main

  EnvSetup:
    needs: [ print_timestamp ]
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      gha-role-name: ${{ steps.set-aws-info.outputs.gha-role-name }}
      dockerfile-path: ${{ steps.set-aws-info.outputs.dockerfile-path }}
      composefile-path: ${{ steps.set-aws-info.outputs.composefile-path }}
      ecr-repo: ${{ steps.extract-repo-name.outputs.repo-name }}
      aws-secret-name: ${{ steps.extract-repo-name.outputs.secret-name }}
      ecr-repo-aws-region: ${{ steps.set-aws-info.outputs.ecr-repo-aws-region }}
    steps:
      - name: Extract repo name
        id: extract-repo-name
        run: |
          REPO_NAME="${{ github.repository }}"
          SHORT_NAME=${REPO_NAME##*/}
          echo "repo-name=$SHORT_NAME" >> $GITHUB_OUTPUT
          echo "secret-name=testnet/$SHORT_NAME" >>$GITHUB_OUTPUT

      - name: set-aws-info
        id: set-aws-info
        run: |
          echo "ecr-repo-aws-region=${{ env.ecr-repo-aws-region }}" >> $GITHUB_OUTPUT
          echo "gha-role-name=${{ env.gha-role-name }}" >> $GITHUB_OUTPUT
          echo "dockerfile-path=${{ env.dockerfile-path }}" >> $GITHUB_OUTPUT
          echo "composefile-path=${{ env.composefile-path }}">> $GITHUB_OUTPUT

  build-scan-publish:
    needs: [ EnvSetup ]
    uses: treasurenetprotocol/reusable-workflows/.github/workflows/reusable-ecr-build-push.yml@feat/add_job_deployment
    with:
      gha-role-name: ${{ needs.EnvSetup.outputs.gha-role-name }}
      dockerfile-path: ${{ needs.EnvSetup.outputs.dockerfile-path }}
      ecr-repo: ${{ needs.EnvSetup.outputs.ecr-repo }}
      ecr-repo-aws-region: ${{ needs.EnvSetup.outputs.ecr-repo-aws-region }}
    secrets:
      AWS_MANAGEMENT_ACCOUNT: ${{ secrets.AWS_MANAGEMENT_ACCOUNT }}
      AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TESTNET_ACCOUNT }}
  
  build-go-binary:
    needs: [ EnvSetup , build-scan-publish ]
    runs-on: self-hosted
    name: Build Go Binary
    steps:

      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'

      - name: Build Go binary
        run: |
          echo "Building Go binary..."
          go env -w GO111MODULE=on
          go mod tidy
          make install

      - name: copy build
        run: |
          ls $(go env GOPATH)/bin
          cp $(go env GOPATH)/bin/treasurenetd .github/scripts/ansible/docker/
          sudo cp $(go env GOPATH)/bin/treasurenetd /usr/bin

      - name: Check if binary exists
        run: |
          if [ -f .github/scripts/ansible/docker/treasurenetd ]; then  
            echo "Binary file exists."
          else
            echo "Binary file does not exist."
            exit 1
          fi

      - name: init
        run: |
          chmod +x init_nodes.sh 
          chmod +x init_node_template.sh
          chmod +x node_config.json
          
          bash init_nodes.sh

      - name: Set up environment variables and .env file
        run: |
          
          echo "IMAGE_NAME=${{ secrets.ECR_REGISTRY }}/${{ inputs.ecr-repo }}:${{ github.sha }}" > .env
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
          echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> .env
           echo "inputs.ecr-repo-aws-region=${ inputs.ecr-repo-aws-region }"  >> .env
           echo "secrets.ECR_REGISTRY=${ secrets.ECR_REGISTRY }" >> .env
          
      - name: copy env to ansible
        run: |
            cp .env .github/scripts/ansible/docker

      - name: new_genesis.json
        run: |
          
          chmod +x new_genesis.sh
          
          bash new_genesis.sh     


  deploy:
    needs: [ print_timestamp, build-go-binary ]
    runs-on: self-hosted

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::381492270411:role/full-ec2
          aws-region: us-west-1
          role-session-name: github-actions
          audience: GitHub_to_AWS_via_FederatedOIDC_test

      - name: Fetch the list of ec2 public IP addresses - validators
        run: |
          echo "Fetching IP address for instance with role: $VALIDATOR_ROLE"
          ip=$(aws ec2 describe-instances \
              --region us-west-1 \
              --filters "Name=tag:Role,Values=$VALIDATOR_ROLE" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
      
          if [ -n "$ip" ]; then
              sorted_ips+=("$ip")
          else
              echo "No IP address found for instance with role: $VALIDATOR_ROLE"
          fi
          
          # Print the sorted IPs
          echo "Sorted IP addresses:"
          for ip in "${sorted_ips[@]}"; do
              echo "$ip"
          done

          # Save the sorted IPs to a file
          printf "%s\n" "${sorted_ips[@]}" >> sorted_ips.txt
          echo "sorted_ips.txt:"
          cat sorted_ips.txt


            
      
      - name: Install ansible on the runner
        run: |
          sudo apt update
          sudo apt install -y ansible
      
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_EC2_WWW_TESTNET_SSH_KEY }}

      - name: check  sorted_ips.txt
        run: |
         
          cat -A sorted_ips.txt


      - name: Prepare the ansible inventory file
        run: |

            rm -f inventory.ini && touch inventory.ini
            echo "[all]" > inventory.ini
            tr '\t' '\n' < sorted_ips.txt | awk '{$1 = $1; if ($1 != "") {    node_id = "node" (NR-1) % 4;   print $0 " ansible_user=ubuntu node_id=" node_id >> "inventory.ini";} }'
            cat inventory.ini
      - name: Add EC2 instances to known_hosts
        run: |
          for ip in $(cat sorted_ips.txt); do
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
          done

      - name: Run the ansible playbook
        run: |
          ansible-playbook -i inventory.ini .github/scripts/ansible/deploy_node.yml

      


