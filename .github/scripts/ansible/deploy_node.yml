---
- name: Deploy Node
  hosts: all
  become: yes

  vars:
    PATH: /home/ubuntu
    GRAFANA_PORT: 3043
    PROMETHEUS_PORT: 3041
    NODEEXPLORTER_PORT: 3045
    LOKI_PORT: 3046
    USER: ubuntu


  tasks:

    - name: Print current working directory using shell
      shell: |
       pwd
       ls


    - name: Create directory for docker configuration
      file:
        path: "{{ PATH }}/docker"
        state: directory
        owner: "{{ USER }}"
        group: "{{ USER }}"

    - name: Copy Docker config files to server
      copy:
        src: docker/
        dest: "{{ PATH }}/docker"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"

    - name: Copy treasurenetd binary to EC2 instance
      copy:
        src: docker/treasurenetd
        dest: "/usr/bin/treasurenetd"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"

    - name: check
      shell: |
        source /etc/profile
        chmod +x /usr/bin/treasurenetd
        chmod +x /home/ubuntu/docker/docker-compose.yaml
        ls $(go env GOPATH)/bin
        mkdir .treasurenetd

    - name: Copy tn node 0 data files to server
      copy:
        src: /data/node0/.treasurenetd
        dest: "{{ PATH }}/.treasurenetd"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      when: node_id == "node0"    

    - name: Copy tn node 1 data files to server
      copy:
        src: /data/node1/.treasurenetd/
        dest: "{{ PATH }}/.treasurenetd/"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      when: node_id == "node1"  

    - name: Copy tn node 2 data files to server
      copy:
        src: /data/node2/.treasurenetd/
        dest: "{{ PATH }}/.treasurenetd/"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      when: node_id == "node2"

    - name: Copy tn node 3 data files to server
      copy:
        src: /data/node3/.treasurenetd/
        dest: "{{ PATH }}/.treasurenetd/"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      when: node_id == "node3"  

    - name: docker-compose up
      shell: |
      cd {{ PATH }}/docker
      source .env
      aws ecr get-login-password --region ${ inputs.ecr-repo-aws-region } | docker login --username AWS --password-stdin ${ secrets.ECR_REGISTRY }
      docker-compose up -d
 