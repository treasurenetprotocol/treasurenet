---
- name: Deploy Node
  hosts: all
  become: yes

  vars:
    PATH: /home/ubuntu
    GRAFANA_PORT: 3043
    PROMETHEUS_PORT: 3041
    NODEEXPLORTER_PORT: 3045
    LOKI_PORT: 3046
    USER: ubuntu
    nodes:
      - id: "node0"
        node_number: 0
      - id: "node1"
        node_number: 1
      - id: "node2"
        node_number: 2
      - id: "node3"
        node_number: 3

  tasks:

    - name: Print current working directory and list files
      shell: |
        pwd
        ls
      register: shell_output
      ignore_errors: yes
      # Print current working directory and list files

    - name: Display shell output
      debug:
        var: shell_output.stdout_lines
      # Display shell output

    - name: Create directory for docker configuration
      file:
        path: "{{ PATH }}/docker"
        state: directory
        owner: "{{ USER }}"
        group: "{{ USER }}"
        mode: '0755'
      # Create directory for docker configuration

    - name: Copy Docker config files to server
      copy:
        src: docker/
        dest: "{{ PATH }}/docker"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      # Copy Docker config files to server

    - name: Copy treasurenetd binary to EC2 instance
      copy:
        src: docker/treasurenetd
        dest: "/usr/bin/treasurenetd"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
        mode: '0755'
      # Copy treasurenetd binary to EC2 instance

    - name: Perform initial setup checks
      shell: |
        source /etc/profile
        chmod +x /usr/bin/treasurenetd
        chmod +x {{ PATH }}/docker/docker-compose.yaml
        ls $(go env GOPATH)/bin
        mkdir -p "{{ PATH }}/.treasurenetd"
      args:
        executable: /bin/bash
      # Perform initial setup checks

    - name: Copy tn data files to server
      copy:
        src: "/data/{{ item.id }}/.treasurenetd/"
        dest: "{{ PATH }}/.treasurenetd/"
        force: yes
        owner: "{{ USER }}"
        group: "{{ USER }}"
      loop: "{{ nodes }}"
      loop_control:
        loop_var: item
      when: node_id == item.id
      # Copy tn nodes' data files to server

    - name: Add number={{ item.node_number }} to .env file
      lineinfile:
        path: "{{ PATH }}/docker/.env"
        regexp: '^number='
        line: "number={{ item.node_number }}"
        state: present
      loop: "{{ nodes }}"
      loop_control:
        loop_var: item
      when: node_id == item.id
      # Add number to .env file

    - name: Ensure .env file ownership and permissions
      file:
        path: "{{ PATH }}/docker/.env"
        owner: "{{ USER }}"
        group: "{{ USER }}"
        mode: '0644'
      loop: "{{ nodes }}"
      loop_control:
        loop_var: item
      when: node_id == item.id
      # Ensure .env file ownership and permissions

    - name: Convert ip_mapping.json to .env
      shell: |
        jq -r 'to_entries[] | "\(.key)_ip=\(.value.private_ip)"' ip_mapping.json >> .env
      args:
        chdir: "{{ PATH }}/docker"
      when: node_id in ['node0', 'node1', 'node2', 'node3']
      # Convert ip_mapping.json to .env

    - name: Display .env file
      shell: cat .env
      args:
        chdir: "{{ PATH }}/docker"
      # Display .env file

    - name: Change hosts
      shell: |
        chmod +x update_hosts.sh
        bash ./update_hosts.sh
        cat /etc/hosts
      args:
        chdir: "{{ PATH }}/docker"
      # Change hosts

    - name: Docker-compose up
      shell: |
        source .env
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
        aws ecr get-login-password --region $inputs_ecr_repo_aws_region | docker login --username AWS --password-stdin $secrets_ECR_REGISTRY
        docker-compose down
        docker-compose pull
        docker-compose up -d
      args:
        chdir: "{{ PATH }}/docker"
        executable: /bin/bash
      # Docker-compose up
